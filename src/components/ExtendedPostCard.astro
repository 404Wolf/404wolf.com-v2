---
import { cva } from "class-variance-authority";
import { titleCase as toTitleCase } from "title-case";
import Tag from "./Tag.astro";

export interface Props {
  coverUrl?: string;
  coverAlt?: string;
  path: string;
  title: string;
  description?: string;
  date: string;
  tags?: string[];
  size?: "sm" | "md" | "lg";
  className?: string;
}

const {
  coverUrl,
  coverAlt,
  path,
  title,
  description,
  date,
  tags = [],
  size = "md",
  className,
} = Astro.props;

const sizeClasses = {
  sm: "h-32",
  md: "h-40",
  lg: "h-48"
};
---

<div
  class={cva([
    "relative bg-cover bg-center rounded-xl transition-all hover:brightness-95 hover:scale-[102%] duration-200 drop-shadow-md hover:drop-shadow-lg",
    sizeClasses[size],
    coverUrl ? "" : "bg-gray-400",
    className
  ])()}
>
  <a href={path} class="relative block w-full h-full">
    {coverUrl ? (
      <img
        alt={coverAlt || `${title}'s cover image`}
        src={coverUrl}
        class="object-cover rounded-xl w-full h-full z-0"
      />
    ) : (
      <div class="bg-gray-400 w-full h-full rounded-xl" />
    )}
    
    <h1 class="z-50 px-2 py-1 text-white text-sm absolute -top-2 -left-2 bg-slate-600 rounded-full">
      {title}
    </h1>
    
    <div class="z-50 px-2 py-1 text-white text-lg absolute -bottom-2 -right-2 bg-slate-600 rounded-full">
      {new Date(date).getFullYear()}
    </div>
    
    {tags.length > 0 && (
      <div class="flex gap-1 absolute -bottom-1 -left-2">
        {tags.map((tag) => (
          <Tag size="sm" contents={toTitleCase(tag)} />
        ))}
      </div>
    )}
    
    {description && (
      <p class="border-t-2 border-l-2 border-slate-500 absolute right-0 bottom-0 z-30 w-5/6 md:w-2/3 bg-gray-200 rounded-tl-3xl overflow-hidden h-[55%] md:h-[62%] p-1 text-xs indent-4">
        {description}
      </p>
    )}
  </a>
</div>