---
import { cva } from "class-variance-authority";
import { titleCase as toTitleCase } from "title-case";
import Tag from "./Tag.astro";

export interface Props {
  coverUrl?: string;
  coverAlt?: string;
  path: string;
  title: string;
  description: string;
  date: string;
  tags?: string[];
  size?: "sm" | "md" | "lg";
  className?: string;
}

const {
  coverUrl,
  coverAlt,
  path,
  title,
  description,
  date,
  tags = [],
  size,
  className,
} = Astro.props;

const cardVariants = cva(
  "relative w-full drop-shadow-md hover:drop-shadow-lg hover:scale-[102%] duration-200 group",
  {
    variants: {
      size: {
        sm: "h-32",
        md: "h-40",
        lg: "h-48",
      },
    },
    defaultVariants: {
      size: "md",
    },
  },
);

const imageVariants = cva("object-cover rounded-xl w-full h-full", {
  variants: {
    variant: {
      image: "bg-gray-400",
      placeholder: "bg-gray-400",
    },
  },
  defaultVariants: {
    variant: "placeholder",
  },
});

const overlayVariants = cva(
  "absolute z-10 px-2 py-1 text-white text-sm bg-slate-600 rounded-full",
  {
    variants: {
      position: {
        topLeft: "-top-2 -left-2",
        topRight: "-top-2 -right-2",
        bottomLeft: "-bottom-2 -left-2",
        bottomRight: "-bottom-2 -right-2",
      },
      size: {
        sm: "text-xs px-1.5 py-0.5",
        md: "text-sm px-2 py-1",
        lg: "text-base px-3 py-1.5",
      },
    },
    defaultVariants: {
      position: "topLeft",
      size: "md",
    },
  },
);

const descriptionVariants = cva(
  "border-t-2 border-l-2 border-slate-500 absolute right-0 bottom-0 z-30 bg-gray-200 rounded-tl-3xl overflow-hidden p-1 text-xs",
  {
    variants: {
      width: {
        narrow: "w-1/2",
        medium: "w-2/3",
        wide: "w-5/6",
      },
      height: {
        sm: "h-1/3",
        md: "h-1/2",
        lg: "h-2/3",
      },
    },
    defaultVariants: {
      width: "wide",
      height: "md",
    },
  },
);
---
<div class={cardVariants({ size, className })}>
  <a href={path} class="block relative w-full h-full">
    {coverUrl ? (
      <img
        alt={coverAlt || `${title}'s cover image`}
        src={coverUrl}
        class={imageVariants({ variant: "image" })}
      />
    ) : (
      <div class={imageVariants({ variant: "placeholder" })} />
    )}
    <h1 class={overlayVariants({ position: "topLeft" })}>{title}</h1>
    <div class={overlayVariants({ position: "bottomRight" })}>{date}</div>
    {tags.length > 0 && (
      <div class="flex gap-1 absolute -bottom-1 -left-2">
        {tags.map((tag) => (
          <Tag variant="secondary" size="sm">{toTitleCase(tag)}</Tag>
        ))}
      </div>
    )}
    <p class={descriptionVariants()}>{description}</p>
  </a>
</div>
