---
import { execa } from "execa";
import { createHash } from "node:crypto";
import { access, mkdir, readFile, writeFile } from "node:fs/promises";
import { join } from "node:path";

interface Props {
	code: string;
}

const { code } = Astro.props;

// Create cache directory
const cacheDir = join(process.cwd(), "node_modules", ".astro", "mermaid");
try {
	await access(cacheDir);
} catch {
	await mkdir(cacheDir, { recursive: true });
}

// Generate hash of the code for cache key
const hash = createHash("md5").update(code).digest("hex");
const cacheFile = join(cacheDir, `${hash}.svg`);

let svgContent: string;

try {
	await access(cacheFile);
	// Use cached version
	svgContent = await readFile(cacheFile, "utf-8");
} catch {
	// Generate new SVG and cache it
	const { stdout } = await execa(
		"mmdc",
		[
			"-i",
			"-",
			"-o",
			"-",
			"-b",
			"transparent",
			"--chromePath",
			"chromium",
			"--noSandbox",
		],
		{
			input: code,
		},
	);
	svgContent = stdout;
	await writeFile(cacheFile, svgContent, "utf-8");
}
---

<div class="mermaid w-full overflow-x-auto p-4 rounded-xl mx-auto">
    <div 
        class="mermaid-svg-container"
        set:html={svgContent} 
    />
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const containers = document.querySelectorAll('.mermaid-svg-container');
    
    containers.forEach(container => {
        const svg = container.querySelector('svg');
        if (svg) {
            // Add attributes to make SVG saveable via right-click
            svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
            svg.setAttribute('title', 'Mermaid Diagram');
        }
    });
});
</script>

<style>
.mermaid-svg-container svg {
    max-width: 100%;
    height: auto;
}
</style>
