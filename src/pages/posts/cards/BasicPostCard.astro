---
import { cva, type VariantProps } from "class-variance-authority";
import { titleCase as toTitleCase } from "title-case";
import type { BlogFrontmatterType } from "../../../content.config";
import Tag from "../../../components/Tag.astro";

export interface Props extends VariantProps<typeof styles.cards> {
  post: BlogFrontmatterType;
  path: string;
  className?: string;
}

const { post, path, size, className } = Astro.props;

let currentCoverUrl = "";
if (post?.covers && post.covers.length > 0) {
  currentCoverUrl = post.covers[0];
}

const tagsToUse = post.tags || [];

const styles = {
  cards: cva("relative p-2 group", {
    variants: {
      size: {
        sm: "h-20",
        md: "h-32",
        lg: "h-40",
      },
    },
    defaultVariants: {
      size: "md",
    },
  }),
  images: cva("bg-cover bg-center rounded transition-all", {
    variants: {
      size: {
        sm: "h-16",
        md: "h-24 lg:h-20",
      },
      interactive: {
        true: "hover:brightness-90 hover:scale-105 duration-100 ease-in",
      },
    },
    defaultVariants: {
      size: "md",
    },
  }),
};

const imageClass = styles.images({ size: "md", interactive: !!post });
const backgroundStyle = currentCoverUrl
  ? `background-image: url('${currentCoverUrl}')`
  : `background-color: rgb(90, 90, 90)`;
const cardClass = styles.cards({ size, className });
---

<div class={cardClass}>
  <a href={path} class="block">
    <div class={imageClass} style={backgroundStyle}>
      <div class="flex gap-1 absolute">
        {post.type && <Tag>{toTitleCase(post.type)}</Tag>}
        {
          tagsToUse.map((tag: string) => (
            <Tag key={tag}>{toTitleCase(tag)}</Tag>
          ))
        }
      </div>
      <Tag position="tr">{post.date}</Tag>
      <h1 class="text-center text-sm sm:text-lg text-white font-bold">
        {post.title}
      </h1>
    </div>
  </a>
</div>
