---
import { type CollectionEntry, getCollection, render } from "astro:content";
import Post from "../../layouts/Post.astro";
import { SITE_URL } from "../../consts";

export async function getStaticPaths() {
	const posts = await getCollection("posts");

	return posts.map((post) => ({
		params: { postId: post.id },
		props: post,
	}));
}

type Props = CollectionEntry<"posts">;

const post = Astro.props;
const { Content } = await render(post);
---

<Post {...post.data} >
  <slot slot="head">
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="title" content={post.data.title} />
    <meta name="description" content={post.data.description || post.data.title} />
    <meta name="author" content="Wolf Mermelstein" />
    <meta name="robots" content="index, follow" />

    <link rel="canonical" href={`${SITE_URL}/posts/${post.id}/`} />
    <meta name="theme-color" content="#1e293b" />
    <meta name="keywords" content={post.data.tags?.join(', ')} />
    <meta name="language" content="en-US" />
    <meta name="article:author" content="Wolf Mermelstein" />

    <meta property="og:type" content="article" />
    <meta property="og:url" content={`${SITE_URL}/posts/${post.id}/`} />
    <meta property="og:title" content={post.data.title} />
    <meta property="og:description" content={post.data.description || post.data.title} />
    {post.data.covers?.[0] && <meta property="og:image" content={post.data.covers[0]} />}
    {post.data.covers?.[0] && <meta property="og:image:width" content="1200" />}
    {post.data.covers?.[0] && <meta property="og:image:height" content="630" />}
    {post.data.covers?.[0] && <meta property="og:image:alt" content={`Cover image for ${post.data.title}`} />}
    <meta property="og:site_name" content="Wolf Mermelstein" />
    <meta property="og:locale" content="en_US" />
    <meta property="article:published_time" content={post.data.date} />
    <meta property="article:section" content={post.data.type} />
    {post.data.tags?.map(tag => <meta property="article:tag" content={tag} />)}
    
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={`${SITE_URL}/posts/${post.id}/`} />
    <meta property="twitter:title" content={post.data.title} />
    <meta property="twitter:description" content={post.data.description || post.data.title} />
    {post.data.covers?.[0] && <meta property="twitter:image" content={post.data.covers[0]} />}
    {post.data.covers?.[0] && <meta property="twitter:image:alt" content={`Cover image for ${post.data.title}`} />}
    <meta property="twitter:creator" content="@404wolf" />
    <meta property="twitter:site" content="@404wolf" />
    </script>
  </slot>
  
  <Content />
</Post>
